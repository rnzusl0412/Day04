리터럴에 대하여 설명 할 수 있다.
데이타 타입과 변수에 대하여 설명 할 수 있다.
기본 자료형 참조형 자료형에 대하여 설명 할 수 있다.
	=boolean, byte, char, short, int, long, float, double

자료형간의 캐스팅(묵시형, 명시형)을 구현 할 수 있다.
java.lang 의 표준 출력ㅇ ㅔ대한 메소드를 호출 할 수 있다.
	System.out.println()
	System.out.printf(String format, Object...args);
	out = java.io.PrintStream
	String format = "%c %d %5.1f %s %o %x"
	out = java.io.PrintStream
	String format = "%-10c %d %5.1f %s %o %x"
	
=====================================================================================================================

class(User_data Type)=속성(값)+메소드(기능)
ex) System.out.println("11"); > 반복문, 제어문 > 나의반복문()_기능;

class 원칙 : 멤버 (상수,변수, (이너클래스) / 메소드(생성자, 메소드) 등등...)
		* 은닉된 멤버변수에게 오픈된(public) 메소드를 통해 값을 전달 및 변경(void형 setter) 하고 리턴(return형 getter)하는 구조
		

변수는 값을 넣어놓았다가 호출하는 것, 메소드는 기능을 넣어놓았다가 호출하는 것.

static	/	non_static
void	/	return

1.	static_void 형 = main()
	[형식]
		public static void UserName(){
			//코드작성
		}
	[호출]
		UserName();
		
	[형식]
		public static void UserName(datatype...arg){
			//코드작성		
		}
	[호출]
		UserName(value...);
		
=====================================================================================================================
Prn(); -----------------------> "안녕하세요"
Public static void Prn(){
	System.out.println("안녕하세요");
}
=====================================================================================================================
http://www.objectaid.com/update/current
=====================================================================================================================

public void println(char x) x='A'
	
	System.out.println('A');

[호출] int a=3; a=5;
Prn(3);	// 3
Prn(5);	// 5
[구현]
public static void Prn(int a){
	Systme.out.println(a);
}











2.	static_return 형
3.	non_static void 형
4.	non_static return 형

